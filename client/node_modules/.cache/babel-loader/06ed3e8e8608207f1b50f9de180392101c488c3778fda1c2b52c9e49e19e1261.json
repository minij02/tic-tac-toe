{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n/**\r\n * useTimer - 타이머 기능을 제공하는 커스텀 훅\r\n * \r\n * @param initialTime - 타이머의 초기 시간(초 단위)\r\n * @param onTimeUp - 타이머가 0이 되었을 때 호출되는 콜백 함수\r\n * @returns { timeLeft, resetTimer } - 남은 시간과 타이머를 초기화하는 함수 반환\r\n */\nfunction useTimer(initialTime, onTimeUp) {\n  _s();\n  // timeLeft - 남은 시간을 관리하는 상태\n  const [timeLeft, setTimeLeft] = useState(initialTime);\n\n  /**\r\n   * useEffect - 컴포넌트가 마운트될 때와 timeLeft가 변경될 때 호출됨.\r\n   * 타이머가 1초마다 감소하며, 남은 시간이 0이 되면 onTimeUp 콜백을 호출함.\r\n   * 컴포넌트가 언마운트될 때는 타이머를 클리어하여 불필요한 메모리 사용을 방지함.\r\n   */\n  useEffect(() => {\n    // 시간이 0이 되었을 때 onTimeUp 콜백 호출\n    if (timeLeft === 0) {\n      onTimeUp();\n    }\n\n    // 타이머를 1초 간격으로 실행, 시간이 줄어듦\n    const timer = setInterval(() => {\n      setTimeLeft(prevTime => prevTime > 0 ? prevTime - 1 : 0); // 시간이 남아 있을 경우 감소\n    }, 1000);\n\n    // 컴포넌트가 언마운트되거나 타이머가 리셋될 때 타이머를 정리\n    return () => clearInterval(timer);\n  }, [timeLeft, onTimeUp]); // timeLeft와 onTimeUp이 변경될 때마다 이 함수 실행\n\n  /**\r\n   * resetTimer - 타이머를 초기화하는 함수\r\n   * 초기 시간을 다시 설정하여 타이머를 리셋함\r\n   */\n  const resetTimer = () => {\n    setTimeLeft(initialTime); // 타이머를 초기 시간으로 리셋\n  };\n\n  // 남은 시간과 타이머 리셋 함수를 반환\n  return {\n    timeLeft,\n    resetTimer\n  };\n}\n_s(useTimer, \"yqSoYhQJzL8uwTmzSNHwkUL8CuE=\");\nexport default useTimer;","map":{"version":3,"names":["useState","useEffect","useTimer","initialTime","onTimeUp","_s","timeLeft","setTimeLeft","timer","setInterval","prevTime","clearInterval","resetTimer"],"sources":["C:/tic-tac-toe/client/src/hooks/useTimer.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n/**\r\n * useTimer - 타이머 기능을 제공하는 커스텀 훅\r\n * \r\n * @param initialTime - 타이머의 초기 시간(초 단위)\r\n * @param onTimeUp - 타이머가 0이 되었을 때 호출되는 콜백 함수\r\n * @returns { timeLeft, resetTimer } - 남은 시간과 타이머를 초기화하는 함수 반환\r\n */\r\nfunction useTimer(initialTime: number, onTimeUp: () => void) {\r\n    // timeLeft - 남은 시간을 관리하는 상태\r\n    const [timeLeft, setTimeLeft] =  useState(initialTime);\r\n\r\n    /**\r\n     * useEffect - 컴포넌트가 마운트될 때와 timeLeft가 변경될 때 호출됨.\r\n     * 타이머가 1초마다 감소하며, 남은 시간이 0이 되면 onTimeUp 콜백을 호출함.\r\n     * 컴포넌트가 언마운트될 때는 타이머를 클리어하여 불필요한 메모리 사용을 방지함.\r\n     */\r\n    useEffect(() => {\r\n        // 시간이 0이 되었을 때 onTimeUp 콜백 호출\r\n        if (timeLeft === 0) {\r\n            onTimeUp(); \r\n        }\r\n\r\n        // 타이머를 1초 간격으로 실행, 시간이 줄어듦\r\n        const timer = setInterval(() => {\r\n            setTimeLeft((prevTime) => (prevTime > 0 ? prevTime -1 : 0)); // 시간이 남아 있을 경우 감소\r\n        }, 1000);\r\n\r\n        // 컴포넌트가 언마운트되거나 타이머가 리셋될 때 타이머를 정리\r\n        return () => clearInterval(timer); \r\n    }, [timeLeft, onTimeUp]); // timeLeft와 onTimeUp이 변경될 때마다 이 함수 실행\r\n\r\n    /**\r\n     * resetTimer - 타이머를 초기화하는 함수\r\n     * 초기 시간을 다시 설정하여 타이머를 리셋함\r\n     */\r\n    const resetTimer = () => {\r\n        setTimeLeft(initialTime); // 타이머를 초기 시간으로 리셋\r\n    };\r\n\r\n    // 남은 시간과 타이머 리셋 함수를 반환\r\n    return { timeLeft, resetTimer };\r\n}\r\n\r\nexport default useTimer;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACC,WAAmB,EAAEC,QAAoB,EAAE;EAAAC,EAAA;EACzD;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAIP,QAAQ,CAACG,WAAW,CAAC;;EAEtD;AACJ;AACA;AACA;AACA;EACIF,SAAS,CAAC,MAAM;IACZ;IACA,IAAIK,QAAQ,KAAK,CAAC,EAAE;MAChBF,QAAQ,CAAC,CAAC;IACd;;IAEA;IACA,MAAMI,KAAK,GAAGC,WAAW,CAAC,MAAM;MAC5BF,WAAW,CAAEG,QAAQ,IAAMA,QAAQ,GAAG,CAAC,GAAGA,QAAQ,GAAE,CAAC,GAAG,CAAE,CAAC,CAAC,CAAC;IACjE,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAMC,aAAa,CAACH,KAAK,CAAC;EACrC,CAAC,EAAE,CAACF,QAAQ,EAAEF,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAE1B;AACJ;AACA;AACA;EACI,MAAMQ,UAAU,GAAGA,CAAA,KAAM;IACrBL,WAAW,CAACJ,WAAW,CAAC,CAAC,CAAC;EAC9B,CAAC;;EAED;EACA,OAAO;IAAEG,QAAQ;IAAEM;EAAW,CAAC;AACnC;AAACP,EAAA,CAlCQH,QAAQ;AAoCjB,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}