{"ast":null,"code":"var _jsxFileName = \"C:\\\\tic-tac-toe\\\\client\\\\src\\\\components\\\\Square.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * Square 컴포넌트는 개별 틱택토 게임 칸을 렌더링하며,\r\n * 사용자가 클릭했을 때 부모 컴포넌트로부터 전달된 onClick 이벤트를 처리하고,\r\n * 승리한 칸인 경우 하이라이트를 적용\r\n *\r\n * @param value - 칸에 표시될 값 ('X', 'O', 또는 null)\r\n * @param onClick - 사용자가 칸을 클릭했을 때 실행될 함수\r\n * @param highlight - 해당 칸이 승리한 칸인 경우 true로 설정 (하이라이트 적용)\r\n */\nfunction Square({\n  value,\n  onClick,\n  highlight,\n  isPreview\n}) {\n  /**\r\n   * 버튼을 렌더링하며, 'square' 클래스 외에도\r\n   * highlight가 true인 경우 'highlight' 클래스를 추가하여 CSS에서 스타일을 적용.\r\n   * \r\n   * @returns JSX.Element - 버튼 요소\r\n   */\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `square ${highlight ? 'highlight' : ''} ${isPreview ? 'preview' : ''}`,\n    onClick: onClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_c = Square;\nexport default Square;\nvar _c;\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Square","value","onClick","highlight","isPreview","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/tic-tac-toe/client/src/components/Square.tsx"],"sourcesContent":["import React from 'react';\r\n\r\ninterface SquareProps {\r\n    value: 'X' | 'O' | null; // 각 칸에 표시될 값 (X, O, 또는 null)\r\n    onClick: () => void; // 클릭 시 실행될 함수 (부모 컴포넌트에서 전달)\r\n    highlight: boolean; // 승리한 칸을 하이라이트 처리하는 플래그\r\n    isPreview: boolean;  // 미리보기 상태 여부\r\n}\r\n\r\n/**\r\n * Square 컴포넌트는 개별 틱택토 게임 칸을 렌더링하며,\r\n * 사용자가 클릭했을 때 부모 컴포넌트로부터 전달된 onClick 이벤트를 처리하고,\r\n * 승리한 칸인 경우 하이라이트를 적용\r\n *\r\n * @param value - 칸에 표시될 값 ('X', 'O', 또는 null)\r\n * @param onClick - 사용자가 칸을 클릭했을 때 실행될 함수\r\n * @param highlight - 해당 칸이 승리한 칸인 경우 true로 설정 (하이라이트 적용)\r\n */\r\nfunction Square({ value, onClick, highlight, isPreview }: SquareProps) {\r\n\r\n    /**\r\n     * 버튼을 렌더링하며, 'square' 클래스 외에도\r\n     * highlight가 true인 경우 'highlight' 클래스를 추가하여 CSS에서 스타일을 적용.\r\n     * \r\n     * @returns JSX.Element - 버튼 요소\r\n     */\r\n    return (\r\n        <button className={`square ${highlight ? 'highlight' :  ''} ${isPreview ? 'preview' :  ''}`} onClick={onClick}>\r\n            {value}  \r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Square;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAAC;EAAEC,KAAK;EAAEC,OAAO;EAAEC,SAAS;EAAEC;AAAuB,CAAC,EAAE;EAEnE;AACJ;AACA;AACA;AACA;AACA;EACI,oBACIL,OAAA;IAAQM,SAAS,EAAE,UAAUF,SAAS,GAAG,WAAW,GAAI,EAAE,IAAIC,SAAS,GAAG,SAAS,GAAI,EAAE,EAAG;IAACF,OAAO,EAAEA,OAAQ;IAAAI,QAAA,EACzGL;EAAK;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEjB;AAACC,EAAA,GAbQX,MAAM;AAef,eAAeA,MAAM;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}