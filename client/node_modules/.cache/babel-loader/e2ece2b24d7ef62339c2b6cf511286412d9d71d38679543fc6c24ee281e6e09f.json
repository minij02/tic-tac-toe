{"ast":null,"code":"var _jsxFileName = \"C:\\\\tic-tac-toe\\\\client\\\\src\\\\components\\\\Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Board from './Board';\nimport Timer from './Timer';\nimport useTimer from '../hooks/useTimer';\nimport calculateWinner from '../utils/calculateWinner';\nimport { calculateBestMove } from '../utils/calculateBestMove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game({\n  playerType,\n  gameTime\n}) {\n  _s();\n  // 게임 상태 관리: 이력, 현재 차례, 정렬 상태\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [previewSquares, setPreviewSquares] = useState(Array(9).fill(null)); // 미리보기 상태 추가\n  const [previewIndex, setPreviewIndex] = useState(null); // 미리보기가 적용된 칸의 인덱스\n  const [ascending, setAscending] = useState(true);\n  const currentSquares = history[stepNumber]; // 현재 보드 상태\n  const winner = calculateWinner(currentSquares); // 승자 계산\n\n  /**\r\n   * handleTimeUp - 시간이 다 되었을 때 턴을 넘김.\r\n   */\n  const handleTimeUp = () => {\n    // 시간이 다 되었을 때, 다음 플레이어로 턴을 넘김\n    if (!winner) {\n      setXIsNext(!xIsNext);\n      setPreviewIndex(null);\n      setPreviewSquares(Array(9).fill(null)); // 미리보기 초기화\n      resetTimer(); // 타이머 리셋\n    }\n  };\n\n  // 타이머 설정: 각 플레이어에게 10초 제한 부여\n  const {\n    timeLeft,\n    resetTimer\n  } = useTimer(gameTime || 10, handleTimeUp);\n\n  // 컴퓨터의 차례인 경우 최적의 수를 두는 로직 추가\n  useEffect(() => {\n    if (!xIsNext && playerType === 'computer' && !winner) {\n      const randomDelay = Math.random() * (gameTime || 10) * 1000; // gameTime 내에서 랜덤 시간 (ms 단위)\n      const bestMove = calculateBestMove(currentSquares); // 컴퓨터의 최적 수 계산\n      makeComputerMove(bestMove); // 컴퓨터가 최적의 수를 둠\n    }\n  }, [xIsNext, playerType, currentSquares, winner]);\n\n  /**\r\n   * 컴퓨터가 최적의 수를 두는 함수\r\n   * @param {number} i - 컴퓨터가 두어야 할 인덱스\r\n   */\n  const makeComputerMove = i => {\n    const squaresCopy = [...currentSquares];\n    squaresCopy[i] = 'O'; // 컴퓨터는 항상 O\n    setHistory([...history.slice(0, stepNumber + 1), squaresCopy]);\n    setStepNumber(stepNumber + 1);\n    setXIsNext(true); // 다시 사람 차례로 넘김\n    resetTimer(); // 컴퓨터가 수를 둔 후 타이머 리셋\n  };\n\n  /**\r\n   * 사람이 수를 두는 함수\r\n   * handleClick - 지정된 인덱스(i)에 첫 번째 클릭 시 미리보기로 표시, 두 번째 클릭 시 실제로 수를 둠.\r\n   * @param {number} i - 클릭된 칸의 인덱스\r\n   * @returns \r\n   */\n  const handleClick = i => {\n    const squaresCopy = [...currentSquares];\n\n    // 이미 승자가 있거나 해당 칸이 차있으면 무시 (미리보기는 무시하지 않음)\n    if (winner || squaresCopy[i]) {\n      return;\n    }\n    if (previewIndex === i) {\n      // 미리보기를 두 번째로 클릭하면 실제로 수를 둠\n      squaresCopy[i] = xIsNext ? 'X' : 'O';\n      setHistory([...history.slice(0, stepNumber + 1), squaresCopy]);\n      setStepNumber(stepNumber + 1);\n      setXIsNext(!xIsNext);\n      setPreviewIndex(null);\n      setPreviewSquares(Array(9).fill(null)); // 미리보기 초기화\n      resetTimer(); // 턴을 넘기면서 타이머 리셋\n    } else {\n      // 첫 번째 클릭 시 미리보기로 수를 표시\n      const previewCopy = [...Array(9).fill(null)];\n      previewCopy[i] = xIsNext ? 'X' : 'O';\n      setPreviewIndex(i);\n      setPreviewSquares(previewCopy);\n    }\n  };\n\n  /**\r\n   * jumpTo - 특정 이동 단계로 되돌아감.\r\n   * @param {number} step - 되돌아갈 단계\r\n   */\n  const jumpTo = step => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n    resetTimer(); // 이동 시 타이머도 리셋\n  };\n\n  /**\r\n   * renderMoves - 게임의 이동 기록을 렌더링함.\r\n   * 이동 기록은 오름차순 또는 내림차순으로 정렬됨.\r\n   */\n  const renderMoves = () => {\n    const moves = history.map((_, move) => {\n      const desc = move ? `Go to move #${move} (${Math.floor((move - 1) / 3)}, ${(move - 1) % 3})` : 'Go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => jumpTo(move),\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this);\n    });\n    return ascending ? moves : moves.reverse(); // 정렬된 이동 기록 반환\n  };\n\n  /**\r\n   * 무승부 상태 계산 - 모든 칸이 채워졌는지 확인하여 무승부 처리\r\n   */\n  const isDraw = () => {\n    return currentSquares.every(square => square !== null) && !winner;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: currentSquares,\n        onSquareClick: handleClick,\n        previewSquares: previewSquares // 미리보기 상태 전달\n        ,\n        winningSquares: winner ? winner.winningSquares : []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: winner ? `Winner: ${winner.winner}` : isDraw() ? 'Draw!' : `Next player: ${xIsNext ? 'X' : 'O'}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this), !winner && !isDraw() && /*#__PURE__*/_jsxDEV(Timer, {\n        timeLeft: timeLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setAscending(!ascending),\n        children: [\"Sort by: \", ascending ? 'Ascending' : 'Descending']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: renderMoves()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n}\n_s(Game, \"rCe5k4oM+ZbhmXpJKhGZU+H2Dn8=\", false, function () {\n  return [useTimer];\n});\n_c = Game;\n;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Board","Timer","useTimer","calculateWinner","calculateBestMove","jsxDEV","_jsxDEV","Game","playerType","gameTime","_s","history","setHistory","Array","fill","stepNumber","setStepNumber","xIsNext","setXIsNext","previewSquares","setPreviewSquares","previewIndex","setPreviewIndex","ascending","setAscending","currentSquares","winner","handleTimeUp","resetTimer","timeLeft","randomDelay","Math","random","bestMove","makeComputerMove","i","squaresCopy","slice","handleClick","previewCopy","jumpTo","step","renderMoves","moves","map","_","move","desc","floor","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","reverse","isDraw","every","square","className","squares","onSquareClick","winningSquares","_c","$RefreshReg$"],"sources":["C:/tic-tac-toe/client/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Board from './Board';\r\nimport Timer from './Timer';\r\nimport useTimer from '../hooks/useTimer';\r\nimport calculateWinner from '../utils/calculateWinner';\r\nimport { calculateBestMove } from '../utils/calculateBestMove'\r\ninterface GameProps {\r\n    playerType: string | null; // vs Person or vs Computer\r\n    gameTime: number | null;   // 게임 시간 설정 (10s, 30s, 60s)\r\n  }\r\n\r\nfunction Game({ playerType, gameTime }: GameProps) {\r\n    // 게임 상태 관리: 이력, 현재 차례, 정렬 상태\r\n    const [history, setHistory] = useState([Array(9).fill(null)]);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsNext, setXIsNext] = useState(true);\r\n    const [previewSquares, setPreviewSquares] = useState(Array(9).fill(null)); // 미리보기 상태 추가\r\n    const [previewIndex, setPreviewIndex] = useState<number | null>(null); // 미리보기가 적용된 칸의 인덱스\r\n    const [ascending, setAscending] = useState(true);\r\n  \r\n    const currentSquares = history[stepNumber]; // 현재 보드 상태\r\n    const winner = calculateWinner(currentSquares); // 승자 계산\r\n\r\n    /**\r\n     * handleTimeUp - 시간이 다 되었을 때 턴을 넘김.\r\n     */\r\n    const handleTimeUp = () => {\r\n        // 시간이 다 되었을 때, 다음 플레이어로 턴을 넘김\r\n        if (!winner) {\r\n            setXIsNext(!xIsNext);\r\n            setPreviewIndex(null);\r\n            setPreviewSquares(Array(9).fill(null)); // 미리보기 초기화\r\n            resetTimer(); // 타이머 리셋\r\n        }\r\n    }\r\n  \r\n    // 타이머 설정: 각 플레이어에게 10초 제한 부여\r\n    const { timeLeft, resetTimer } = useTimer(gameTime || 10, handleTimeUp);\r\n\r\n     // 컴퓨터의 차례인 경우 최적의 수를 두는 로직 추가\r\n    useEffect(() => {\r\n      if (!xIsNext && playerType === 'computer' && !winner) {\r\n        const randomDelay = Math.random() * (gameTime || 10) * 1000; // gameTime 내에서 랜덤 시간 (ms 단위)\r\n        const bestMove = calculateBestMove(currentSquares); // 컴퓨터의 최적 수 계산\r\n        makeComputerMove(bestMove);  // 컴퓨터가 최적의 수를 둠\r\n    }\r\n  }, [xIsNext, playerType, currentSquares, winner]);\r\n\r\n  /**\r\n   * 컴퓨터가 최적의 수를 두는 함수\r\n   * @param {number} i - 컴퓨터가 두어야 할 인덱스\r\n   */\r\n  const makeComputerMove = (i: number) => {\r\n    const squaresCopy = [...currentSquares];\r\n\r\n    squaresCopy[i] = 'O'; // 컴퓨터는 항상 O\r\n    setHistory([...history.slice(0, stepNumber + 1), squaresCopy]);\r\n    setStepNumber(stepNumber + 1);\r\n    setXIsNext(true); // 다시 사람 차례로 넘김\r\n    resetTimer(); // 컴퓨터가 수를 둔 후 타이머 리셋\r\n  };\r\n\r\n    /**\r\n     * 사람이 수를 두는 함수\r\n     * handleClick - 지정된 인덱스(i)에 첫 번째 클릭 시 미리보기로 표시, 두 번째 클릭 시 실제로 수를 둠.\r\n     * @param {number} i - 클릭된 칸의 인덱스\r\n     * @returns \r\n     */\r\n    const handleClick = (i: number) => {\r\n        const squaresCopy = [...currentSquares];\r\n\r\n        // 이미 승자가 있거나 해당 칸이 차있으면 무시 (미리보기는 무시하지 않음)\r\n        if (winner || squaresCopy[i]) {\r\n            return;\r\n        }\r\n\r\n        if (previewIndex === i) {\r\n            // 미리보기를 두 번째로 클릭하면 실제로 수를 둠\r\n            squaresCopy[i] = xIsNext ? 'X' : 'O';\r\n            setHistory([...history.slice(0, stepNumber + 1), squaresCopy]);\r\n            setStepNumber(stepNumber + 1);\r\n            setXIsNext(!xIsNext);\r\n            setPreviewIndex(null);\r\n            setPreviewSquares(Array(9).fill(null)); // 미리보기 초기화\r\n            resetTimer(); // 턴을 넘기면서 타이머 리셋\r\n        } else {\r\n            // 첫 번째 클릭 시 미리보기로 수를 표시\r\n            const previewCopy = [...Array(9).fill(null)];\r\n            previewCopy[i] = xIsNext ? 'X' : 'O';\r\n            setPreviewIndex(i);\r\n            setPreviewSquares(previewCopy);\r\n        }\r\n    };\r\n  \r\n    /**\r\n     * jumpTo - 특정 이동 단계로 되돌아감.\r\n     * @param {number} step - 되돌아갈 단계\r\n     */\r\n    const jumpTo = (step: number) => {\r\n      setStepNumber(step);\r\n      setXIsNext(step % 2 === 0);\r\n      resetTimer(); // 이동 시 타이머도 리셋\r\n    };\r\n  \r\n    /**\r\n     * renderMoves - 게임의 이동 기록을 렌더링함.\r\n     * 이동 기록은 오름차순 또는 내림차순으로 정렬됨.\r\n     */\r\n    const renderMoves = () => {\r\n      const moves = history.map((_, move) => {\r\n        const desc = move\r\n          ? `Go to move #${move} (${Math.floor((move - 1) / 3)}, ${(move - 1) % 3})`\r\n          : 'Go to game start';\r\n  \r\n        return (\r\n          <li key={move}>\r\n            <button onClick={() => jumpTo(move)}>{desc}</button>\r\n          </li>\r\n        );\r\n      });\r\n  \r\n      return ascending ? moves : moves.reverse();  // 정렬된 이동 기록 반환\r\n    };\r\n  \r\n    /**\r\n     * 무승부 상태 계산 - 모든 칸이 채워졌는지 확인하여 무승부 처리\r\n     */\r\n    const isDraw = () => {\r\n        return currentSquares.every(square => square !== null) && !winner;\r\n    }\r\n    return (\r\n        <div className=\"game\">\r\n        <div className=\"game-board\">\r\n            <Board\r\n                squares={currentSquares}\r\n                onSquareClick={handleClick}\r\n                previewSquares={previewSquares} // 미리보기 상태 전달\r\n                winningSquares={winner ? winner.winningSquares : []}\r\n            />\r\n        </div>\r\n        <div className=\"game-info\">\r\n            <div>\r\n                {winner\r\n                    ? `Winner: ${winner.winner}`\r\n                    : isDraw()\r\n                    ? 'Draw!'\r\n                    : `Next player: ${xIsNext ? 'X' : 'O'}`}\r\n            </div>\r\n\r\n            {!winner && !isDraw() && <Timer timeLeft={timeLeft} />}\r\n\r\n            <button onClick={() => setAscending(!ascending)}>\r\n                Sort by: {ascending ? 'Ascending' : 'Descending'}\r\n            </button>\r\n            <ol>{renderMoves()}</ol>\r\n        </div>\r\n    </div>\r\n    );\r\n  };  \r\n\r\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}