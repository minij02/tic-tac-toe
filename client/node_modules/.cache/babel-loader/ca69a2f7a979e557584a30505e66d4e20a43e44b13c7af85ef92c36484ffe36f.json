{"ast":null,"code":"var _jsxFileName = \"C:\\\\tic-tac-toe\\\\client\\\\src\\\\components\\\\Board.tsx\";\nimport React from 'react';\nimport Square from './Square';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * Board 컴포넌트는 틱택토 보드를 렌더링하며, 각 칸(Square)을 클릭할 때\r\n * 이벤트를 처리하고, 승리한 칸을 하이라이트하는 역할을 한다.\r\n * \r\n * @param squares - 현재 게임판의 상태\r\n * @param onSquareClick - 사용자가 특정 칸을 클릭했을 때 호출되는 함수\r\n * @param winningSquares - 승리한 칸들의 인덱스를 저장한 배열 (하이라이트 용도)\r\n */\n\nconst Board = ({\n  squares,\n  onSquareClick,\n  winningSquares\n}) => {\n  /**\r\n   * renderSquare - 특정 인덱스(i)에 해당하는 Square 컴포넌트를 렌더링함.\r\n   * 승리한 칸을 하이라이트하기 위해 해당 칸이 winningSquares 배열에 포함되어 있는지 확인.\r\n   * \r\n   * @param i - Square의 인덱스\r\n   * @returns JSX.Element - 개별 Square 컴포넌트\r\n   */\n  const renderSquare = i => {\n    var _winningSquares$inclu;\n    // 해당 Square가 승리한 칸인지 확인 (null인 경우 false로 처리)\n    const isWinningSquare = (_winningSquares$inclu = winningSquares === null || winningSquares === void 0 ? void 0 : winningSquares.includes(i)) !== null && _winningSquares$inclu !== void 0 ? _winningSquares$inclu : false;\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: squares[i] // 현재 칸의 값 (X, O, null)\n      ,\n      onClick: () => onSquareClick(i) // 사용자가 클릭했을 때 호출되는 이벤트\n      ,\n      highlight: isWinningSquare // 하이라이트 여부 전달\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this);\n  };\n\n  /**\r\n   * renderBoard - 3x3 보드를 렌더링하는 함수.\r\n   * 이중 for문을 사용하여 각 행(row)와 열(col)을 생성하고, 각 칸을 renderSquare로 생성\r\n   * \r\n   * @returns JSX.Element[] - 3x3 보드를 구성하는 JSX 배열\r\n   */\n  const renderBoard = () => {\n    let board = []; // 전체 보드를 저장하는 배열\n\n    for (let row = 0; row < 3; row++) {\n      let boardRow = []; // 각 행에 해당하는 배열\n\n      for (let col = 0; col < 3; col++) {\n        // (row * 3 + col)을 통해  0~8까지의 인덱스를 계산하여 각 칸을 렌더링\n        boardRow.push(renderSquare(row * 3 + col));\n      }\n      // boardRow 배열을 하나의 행으로 만들어 board에 추가\n      board.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: boardRow\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 20\n      }, this));\n    }\n    return board;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderBoard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 12\n  }, this);\n};\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","Square","jsxDEV","_jsxDEV","Board","squares","onSquareClick","winningSquares","renderSquare","i","_winningSquares$inclu","isWinningSquare","includes","value","onClick","highlight","fileName","_jsxFileName","lineNumber","columnNumber","renderBoard","board","row","boardRow","col","push","className","children","_c","$RefreshReg$"],"sources":["C:/tic-tac-toe/client/src/components/Board.tsx"],"sourcesContent":["import React from 'react';\r\nimport Square from './Square';\r\n\r\ninterface BoardProps {\r\n    squares: ('X' | 'O' | null)[]; // 게임판의 상태를 나타내는 배열 (각 칸에 X, O 또는 null)\r\n    onSquareClick: (i: number) => void; // 클릭 이벤트를 처리하는 함수\r\n    winningSquares: number[] | null; // 승리한 칸의 인덱스를 저장한 배열 또는 null\r\n}\r\n\r\n/**\r\n * Board 컴포넌트는 틱택토 보드를 렌더링하며, 각 칸(Square)을 클릭할 때\r\n * 이벤트를 처리하고, 승리한 칸을 하이라이트하는 역할을 한다.\r\n * \r\n * @param squares - 현재 게임판의 상태\r\n * @param onSquareClick - 사용자가 특정 칸을 클릭했을 때 호출되는 함수\r\n * @param winningSquares - 승리한 칸들의 인덱스를 저장한 배열 (하이라이트 용도)\r\n */\r\n\r\nconst Board: React.FC<BoardProps> = ({ squares, onSquareClick, winningSquares }) => {\r\n\r\n    /**\r\n     * renderSquare - 특정 인덱스(i)에 해당하는 Square 컴포넌트를 렌더링함.\r\n     * 승리한 칸을 하이라이트하기 위해 해당 칸이 winningSquares 배열에 포함되어 있는지 확인.\r\n     * \r\n     * @param i - Square의 인덱스\r\n     * @returns JSX.Element - 개별 Square 컴포넌트\r\n     */\r\n    const renderSquare = (i: number) => {\r\n      // 해당 Square가 승리한 칸인지 확인 (null인 경우 false로 처리)\r\n      const isWinningSquare = winningSquares?.includes(i) ?? false;\r\n      return (\r\n        <Square\r\n          value={squares[i]} // 현재 칸의 값 (X, O, null)\r\n          onClick={() => onSquareClick(i)} // 사용자가 클릭했을 때 호출되는 이벤트\r\n          highlight={isWinningSquare}  // 하이라이트 여부 전달\r\n        />\r\n      );\r\n    };\r\n  \r\n    /**\r\n     * renderBoard - 3x3 보드를 렌더링하는 함수.\r\n     * 이중 for문을 사용하여 각 행(row)와 열(col)을 생성하고, 각 칸을 renderSquare로 생성\r\n     * \r\n     * @returns JSX.Element[] - 3x3 보드를 구성하는 JSX 배열\r\n     */\r\n    const renderBoard = () => {\r\n      let board = []; // 전체 보드를 저장하는 배열\r\n\r\n      for (let row = 0; row < 3; row++) {\r\n        let boardRow = []; // 각 행에 해당하는 배열\r\n\r\n        for (let col = 0; col < 3; col++) {\r\n            // (row * 3 + col)을 통해  0~8까지의 인덱스를 계산하여 각 칸을 렌더링\r\n          boardRow.push(renderSquare(row * 3 + col));\r\n        }\r\n        // boardRow 배열을 하나의 행으로 만들어 board에 추가\r\n        board.push(<div key={row} className=\"board-row\">{boardRow}</div>);\r\n      }\r\n      return board;\r\n    };\r\n  \r\n    return <div>{renderBoard()}</div>;\r\n  };  \r\n\r\nexport default Board;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAA2B,GAAGA,CAAC;EAAEC,OAAO;EAAEC,aAAa;EAAEC;AAAe,CAAC,KAAK;EAEhF;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,YAAY,GAAIC,CAAS,IAAK;IAAA,IAAAC,qBAAA;IAClC;IACA,MAAMC,eAAe,IAAAD,qBAAA,GAAGH,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEK,QAAQ,CAACH,CAAC,CAAC,cAAAC,qBAAA,cAAAA,qBAAA,GAAI,KAAK;IAC5D,oBACEP,OAAA,CAACF,MAAM;MACLY,KAAK,EAAER,OAAO,CAACI,CAAC,CAAE,CAAC;MAAA;MACnBK,OAAO,EAAEA,CAAA,KAAMR,aAAa,CAACG,CAAC,CAAE,CAAC;MAAA;MACjCM,SAAS,EAAEJ,eAAgB,CAAE;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC;EAEN,CAAC;;EAED;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIC,KAAK,GAAG,EAAE,CAAC,CAAC;;IAEhB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,IAAIC,QAAQ,GAAG,EAAE,CAAC,CAAC;;MAEnB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAC9B;QACFD,QAAQ,CAACE,IAAI,CAACjB,YAAY,CAACc,GAAG,GAAG,CAAC,GAAGE,GAAG,CAAC,CAAC;MAC5C;MACA;MACAH,KAAK,CAACI,IAAI,cAACtB,OAAA;QAAeuB,SAAS,EAAC,WAAW;QAAAC,QAAA,EAAEJ;MAAQ,GAApCD,GAAG;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAuC,CAAC,CAAC;IACnE;IACA,OAAOE,KAAK;EACd,CAAC;EAED,oBAAOlB,OAAA;IAAAwB,QAAA,EAAMP,WAAW,CAAC;EAAC;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACnC,CAAC;AAACS,EAAA,GA5CExB,KAA2B;AA8CjC,eAAeA,KAAK;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}